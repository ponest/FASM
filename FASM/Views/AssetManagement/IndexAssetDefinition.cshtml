@model FASM_EN.AssetManagement.AssetDefinition
@using FASM.GeneralObjects
@{
    ViewBag.Title = "Index AssetDefinition";
    ViewBag.HeaderText = "AssetDefinition";
}

@section Styles{

    @Styles.Render("~/plugin/sweetAlertStyles")

}
@section breadcrumb{
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="@Url.Action("Index",ControllerName.Accounts)">Home</a></li>
        <li class="breadcrumb-item"><a href="#">Manage Assets</a></li>
        <li class="breadcrumb-item active" aria-current="page">AssetDefinition</li>
    </ol>
}
<div class="tile">
    <div>@ViewBag.CatchedMsg</div>
    @if (ViewBag.AllowAdd)
    {
        <button type="button" class="btn btn-primary btn-sm addBtns" data-toggle="modal" data-target="#AssetDefinitionModal"><i class="fa fa-plus-circle fa-lg"></i>New AssetDefinition</button>
    }
    <table class="table table-sm table-striped table-bordered" id="myTable">

        <thead class="thead-dark">
            <tr>
                <th style="display:none">Id</th>
                <th>Asset Name</th>
                <th>Brand Name</th>
                <th>Depreciation Method</th>
                <th width="14%">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (System.Data.DataRow item in Model.dtAssetDefinition.Rows)
            {
                <tr>
                    <td style="display:none">@Html.DisplayTextFor(modelItem => item["AssetDefinitionId"])</td>
                    <td>@Html.DisplayTextFor(ModelItem => item["AssetName"])</td>
                    <td>@Html.DisplayTextFor(ModelItem => item["BrandName"])</td>
                    <td>@Html.DisplayTextFor(ModelItem => item["DepreciationMethod"])</td>
                    <td>
                        @using (Html.BeginForm("LoadEditAssetDefinition", ControllerName.AssetManagement, FormMethod.Post, new { @class = "EditAssetDefinition" }))
                        {
                            if (ViewBag.AllowLoadEdit)
                            {
                                <button class="btn-success btn-xs UserBtnSuccess" type="submit"><i class="fa fa-pencil-square-o"></i> Edit</button>
                            }
                            @Html.HiddenFor(m => m.AssetDefinitionId, new { @Value = item["AssetDefinitionId"] });
                        }
                        @if (ViewBag.AllowDelete)
                        {
                            <button type="button" AssetDefinitionIdentifier="@item["AssetDefinitionId"]" class="btn-danger btn-xs UserBtnDanger pull-right btnDelete" style="margin-top:-23px;margin-right:10px"><i class="fa fa-trash-o"></i>  Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="AssetDefinitionModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New AssetDefinition</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="status-area"></div>
                <form class="form" role="form">
                            <div class="form-group">
                                @Html.LabelFor(m => m.AssetName, new { @class = "col-md-6 control-label" })
                                @Html.TextBoxFor(m => m.AssetName, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.CategoryId, new { @class = "col-md-6 control-label" })
                                @Html.DropDownListFor(m => m.CategoryId, (IEnumerable<SelectListItem>)ViewData["CategoryName"],new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.BrandName, new { @class = "col-md-6 control-label" })
                                @Html.TextBoxFor(m => m.BrandName, new { @class = "form-control" })
                            </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.DepreciationMethod, new { @class = "col-md-6 control-label" })
                                @Html.DropDownListFor(m => m.DepreciationMethod, (IEnumerable<SelectListItem>)ViewData["DepreciationMethods"],new { @class = "form-control" })
                            </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="SaveAssetDefinition">Save</button>
                <button type="button" class="btn btn-default btnClose" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="EditAssetDefinitionModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit AssetDefinition</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">

            </div>
            <div class="modal-footer">
                @if (ViewBag.AllowEdit)
                {
                    <button type="submit" class="btn btn-primary AssetDefinition" id="AssetDefinition">Update</button>
                }
                <button type="button" class="btn btn-default btnClose" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
@section Scripts
{
    @Scripts.Render("~/DataTables/js")
    @Scripts.Render("~/plugin/sweetAlert")
    <script type="text/javascript">

        $(document).ready(function () {
            //claer the values of text fields
            function clearValues() {
                $("#AssetName").val('');
                $("#BrandName").val('');
                $("#DepreciationMethod").val('');
            }

            //putting focus on Asset Name text field after the modal pop up
            $('#AssetDefinitionModal').on('shown.bs.modal', function () {
                $('#AssetName').focus();
            })

            //clear value and reload the page
            $(".btnClose").click(function () {
                clearValues();
                location.reload();
            });

            //Cheking the validity of text fields
            function IsValidData() {
                if ($("#AssetName").val() == "") {
                    return "Please fill in the Asset Name";
                }  else if ($("#DepreciationMethod").val() == "") {
                    return "Please Select the depreciation method";
                } 
                return "";
            }

            //Cheking the validity of text fields
            function IsValidEditData() {
                if ($("#EditAssetName").val() == "") {
                    return "Please fill in the Asset Name";
                } else if ($("#EditDepreciationMethod").val() == "") {
                    return "Please Select the depreciation method";
                }
                return "";
            }

            // for editing purpose
            $(".AssetDefinition").click(function () {

                var ValidateMsg = IsValidEditData();
                if (ValidateMsg != "") {
                    ShowNotice('#Editstatus-area', ValidateMsg, "Failure");
                    return false;
                }

                var AssetDefinitionData = {
                    AssetDefinitionId:$("#EditAssetDefinitionId").val(),
                    AssetName: $("#EditAssetName").val(),
                    BrandName: $("#EditBrandName").val(),
                    DepreciationMethod: $("#EditDepreciationMethod").val(),
                    CategoryId: $("#EditCategoryId").val()
                };
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("PostEditAssetDefinition",ControllerName.AssetManagement)',
                    data: AssetDefinitionData,
                    dataType: "json",
                    success: function (data) {
                        if (data.msg.toString() == "@FASM_GN.FASM_Msg.Updated") {
                            ShowNotice("#Editstatus-area", data.msg,"Success");
                        }
                        else {
                            ShowNotice('#Editstatus-area',data.msg,"Failure");
                        }
                        clearValues();

                    },
                    error: function () {
                        ShowNotice('#Editstatus-area',"Error occured!!","Failure");
                        clearValues();
                    }
                });
            })

            //for saving purpose
            $("#SaveAssetDefinition").click(function () {

                var ValidateMsg = IsValidData();
                if (ValidateMsg != "") {
                    ShowNotice('#status-area', ValidateMsg, "Failure");
                    return false;
                }

                var AssetDefinitionData = {
                    AssetName: $("#AssetName").val(),
                    BrandName: $("#BrandName").val(),
                    DepreciationMethod: $("#DepreciationMethod").val(),
                    CategoryId: $("#CategoryId").val()
                };

                $.ajax({
                    type: "POST",
                    url: '@Url.Action("CreateAssetDefinition",ControllerName.AssetManagement)',
                    data: AssetDefinitionData,
                    dataType: "json",
                    success: function (data) {
                        if (data.msg.toString() == "@FASM_GN.FASM_Msg.SuccessfulSaved") {
                            ShowNotice('#status-area', data.msg, "Success");
                        }
                        else {
                            ShowNotice('#status-area', data.msg, "Failure");
                        }
                        clearValues();
                    },
                    error: function () {
                        ShowNotice('#status-area', "Error occured!!", "Failure");
                        clearValues();
                    }
                });
            })
            $('#myTable').DataTable();

            //loading edit AssetDefinition modal
            $('.EditAssetDefinition').submit(function (e) {
                e.preventDefault();
                var $form = $(this);

                $.post($form.attr("action"), $form.serialize()).done(function (res) {
                    $mymodal = $("#EditAssetDefinitionModal");
                    //update the modal's body with the response received
                    $mymodal.find("div.modal-body").html(res);
                    // Show the modal
                    $mymodal.modal("show");
                });
            });

            //Deleting AssetDefinition
            $("button.btnDelete").click(function () {
                var Id = $(this).attr("AssetDefinitionIdentifier");
                DeleteItem(Id);

            });

            function DeleteItem(Id){
                DataObject = { AssetDefinitionId: Id };

                swal({
                    title: "Confirm Deletion",
                    text: "Are you sure that you want to delete this Asset Definition?",
                    type: "warning",
                    showCancelButton: true,
                    closeOnConfirm: false,
                    confirmButtonText: "Yes, delete it!",
                    confirmButtonColor: "#ec6c62"
                }, function() {
                    $.ajax({
                        url: '@Url.Action("DeleteAssetDefinition",ControllerName.AssetManagement)',
                        type: "POST",
                        data: DataObject,
                        dataType: "json",
                        success: function (data) {
                            swal("Deleted!", data, "success");
                            swal({ title: "Deleted!", text:data, type: "success" }, function () {location.reload();});
                        },
                        error: function (data) {
                            swal("Oops", data, "error");
                        }
                    })

                });
            }
                });
    </script>
}








